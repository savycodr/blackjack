{"version":3,"sources":["components/GameDeck.jsx","App.js","serviceWorker.js","index.js"],"names":["GameDeck","props","react_default","a","createElement","cards","map","card","src","image","alt","API","axios","get","deck_id","num","cardMap","KING","QUEEN","JACK","ACE","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","playerCards","dealerCards","deckId","message","handleHitClick","bind","assertThisInitialized","handleStandClick","_this2","then","res","setState","data","console","log","push","value","catch","error","e","_this3","preventDefault","getTotalValue","dealerTotal","playerTotal","hitDealer","total","forEach","x","_this4","className","components_GameDeck","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6cd55f08.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// pass in an array of cards\r\nfunction GameDeck(props){\r\n    return (\r\n\r\n    <div>\r\n      {\r\n        props.cards.map(card => (\r\n          <img src={card.image} alt=\"card\" />\r\n          ))\r\n      }\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default GameDeck;\r\n","import React from 'react';\nimport {Component} from 'react';\nimport axios from \"axios\";\nimport GameDeck from \"./components/GameDeck.jsx\";\n\n\nimport './App.css';\n\nconst API = {\n  shuffle: function(){\n    return axios.get(\"https://deckofcardsapi.com/api/deck/new/shuffle/\");\n  },\n  \n  deal: function(deck_id, num){\n    return axios.get(\"https://deckofcardsapi.com/api/deck/\"+deck_id+\"/draw/?count=\"+num);\n  } \n}\n\nconst cardMap = {\n    \"KING\": 10,\n    \"QUEEN\": 10,\n    \"JACK\": 10,\n    \"ACE\": 1\n  }\n\nclass App extends Component {\n\nconstructor(props){\n  super(props);\n  this.state= {\n    playerCards: [],\n    dealerCards: [],\n    deckId: 0,\n    message: \"Welcome\"\n  }\n  this.handleHitClick = this.handleHitClick.bind(this);\n  this.handleStandClick = this.handleStandClick.bind(this);\n\n}\n\n\n  componentDidMount(){\n    // shuffle the deck\n    API.shuffle().then(res=>{\n      this.setState({deckId:res.data.deck_id});\n      console.log(\"cards are shuffled \" + this.state.deckId);\n\n      // deal 4 cards\n      API.deal(this.state.deckId, 4).then(res=>{\n        console.log(\"cards are dealt\");\n  \n        let playerCards = []\n        playerCards.push(\n          {image: res.data.cards[0].image,\n          value: res.data.cards[0].value});\n        playerCards.push(\n          { image: res.data.cards[1].image,\n            value: res.data.cards[1].value});\n        this.setState({playerCards: playerCards});\n    \n        let dealerCards = []\n        dealerCards.push(\n          {image: res.data.cards[2].image,\n          value: res.data.cards[2].value});\n          dealerCards.push(\n          { image: res.data.cards[3].image,\n            value: res.data.cards[3].value});\n        this.setState({dealerCards: dealerCards});\n  \n        console.log(\"playerCards \", playerCards );\n        console.log(\"dealerCards \", dealerCards );\n\n     })\n    }).catch(error =>console.log(error));\n  }\n\n  // Handle the hit button\n  handleHitClick(e){\n    e.preventDefault();\n    API.deal(this.state.deckId, 1).then(res=>{\n      console.log(\"a new card is dealt\");\n  \n      let cards = this.state.playerCards;\n      cards.push(\n        {image: res.data.cards[0].image,\n        value: res.data.cards[0].value});\n\n      this.setState({playerCards: cards});\n\n      let total = this.getTotalValue(cards);\n      if (total >21){\n        console.log(\"You lose\");\n        this.setState({message: \"You Lose!\"})\n      }\n    \n     });\n\n  }\n\n  handleStandClick(e){\n    e.preventDefault();\n\n    let dealerTotal = this.getTotalValue(this.state.dealerCards);\n    let playerTotal = this.getTotalValue(this.state.playerCards);\n\n    dealerTotal = this.hitDealer(dealerTotal);\n\n    if ((dealerTotal > 21)||(dealerTotal<playerTotal)){\n      this.setState({message: \"You Win\"});\n    } else if (dealerTotal == playerTotal)  {\n      this.setState({message: \"You Tie\"});\n    } else {\n      this.setState({message: \"You Lose\"});\n    }\n  }\n\n  getTotalValue(cards){\n    let total = 0;\n    cards.forEach(x=>{\n      total += cardMap[x.value] || +x.value;\n    })\n    return total;\n  }\n\n  hitDealer(total){\n    if (total<17)\n    {\n      API.deal(this.state.deckId, 1).then(res=>{\n        console.log(\"a new card is dealt to the dealer\");\n    \n        let cards = this.state.dealerCards;\n        cards.push(\n          {image: res.data.cards[0].image,\n          value: res.data.cards[0].value});\n  \n        this.setState({dealerCards: cards});\n  \n        total = this.getTotalValue(cards);\n        this.hitDealer(total);\n      })\n    } else {\n      return total;\n    }\n  }\n\n  render(){\n    return(\n    <div className=\"App\">\n        <div>\n          <h1>{this.state.message}</h1>\n          <h2>Dealer's Hand</h2>\n          <GameDeck cards={this.state.dealerCards}></GameDeck>\n          <h2>Player's Hand</h2>\n          <GameDeck cards={this.state.playerCards}></GameDeck>\n        </div>\n        <div>\n          <button onClick={this.handleHitClick}>Hit</button>\n          <button onClick={this.handleStandClick}>Stand</button>\n        </div>\n    </div>\n  )}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}