{"version":3,"sources":["components/GameDeck.jsx","App.js","serviceWorker.js","index.js"],"names":["GameDeck","props","react_default","a","createElement","cards","map","card","className","src","image","alt","API","axios","get","deck_id","num","cardMap","KING","QUEEN","JACK","ACE","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","playerCards","dealerCards","deckId","message","disableBtn","handleHitClick","bind","assertThisInitialized","handleStandClick","handleResetClick","init","_this2","then","res","setState","data","console","log","push","value","catch","error","e","_this3","preventDefault","total","getTotalValue","hitDealer","dealerTotal","playerTotal","forEach","x","_this4","determineWinner","components_GameDeck","disabled","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e09c1cf8.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\";\r\n\r\n// pass in an array of cards\r\nfunction GameDeck(props){\r\n    return (\r\n\r\n    <div >\r\n      {\r\n        props.cards.map(card => (\r\n          <div className=\"card\">\r\n          <img src={card.image} alt=\"card\" />\r\n          </div>\r\n          ))\r\n      }\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default GameDeck;\r\n","import React from 'react';\nimport {Component} from 'react';\nimport axios from \"axios\";\nimport GameDeck from \"./components/GameDeck.jsx\";\n\n\nimport './App.css';\n\nconst API = {\n  shuffle: function(){\n    return axios.get(\"https://deckofcardsapi.com/api/deck/new/shuffle/\");\n  },\n  \n  deal: function(deck_id, num){\n    return axios.get(\"https://deckofcardsapi.com/api/deck/\"+deck_id+\"/draw/?count=\"+num);\n  } \n}\n\nconst cardMap = {\n    \"KING\": 10,\n    \"QUEEN\": 10,\n    \"JACK\": 10,\n    \"ACE\": 1\n  }\n\nclass App extends Component {\n\nconstructor(props){\n  super(props);\n  this.state= {\n    playerCards: [],\n    dealerCards: [],\n    deckId: 0,\n    message: \"Welcome\",\n    disableBtn: false\n  }\n  this.handleHitClick = this.handleHitClick.bind(this);\n  this.handleStandClick = this.handleStandClick.bind(this);\n  this.handleResetClick = this.handleResetClick.bind(this);\n\n}\n\n\n  componentDidMount(){\n\n    this.init();\n  }\n\n  init(){\n\n        // shuffle the deck\n        API.shuffle().then(res=>{\n          this.setState({deckId:res.data.deck_id});\n          console.log(\"cards are shuffled \" + this.state.deckId);\n    \n          // deal 4 cards\n          API.deal(this.state.deckId, 4).then(res=>{\n            console.log(\"cards are dealt\");\n      \n            let playerCards = []\n            playerCards.push(\n              {image: res.data.cards[0].image,\n              value: res.data.cards[0].value});\n            playerCards.push(\n              { image: res.data.cards[1].image,\n                value: res.data.cards[1].value});\n            this.setState({playerCards: playerCards});\n        \n            let dealerCards = []\n            dealerCards.push(\n              {image: res.data.cards[2].image,\n              value: res.data.cards[2].value});\n              dealerCards.push(\n              { image: res.data.cards[3].image,\n                value: res.data.cards[3].value});\n            this.setState({dealerCards: dealerCards});\n      \n            console.log(\"playerCards \", playerCards );\n            console.log(\"dealerCards \", dealerCards );\n    \n         })\n        }).catch(error =>console.log(error));\n    \n  }\n\n  // Handle the hit button\n  handleHitClick(e){\n    e.preventDefault();\n    API.deal(this.state.deckId, 1).then(res=>{\n      console.log(\"a new card is dealt\");\n  \n      let cards = this.state.playerCards;\n      cards.push(\n        {image: res.data.cards[0].image,\n        value: res.data.cards[0].value});\n\n      this.setState({playerCards: cards});\n\n      let total = this.getTotalValue(cards);\n      if (total >21){\n        console.log(\"1. You lose \" + total);\n        this.setState({message: \"You Lose!\"});\n        this.setState({disableBtn: true});\n      }\n    \n     });\n\n  }\n\n  handleStandClick(e){\n    e.preventDefault();\n    // this.hitDealer(this.determineWinner());\n    this.hitDealer();\n  }\n\n  determineWinner(){\n  let dealerTotal = this.getTotalValue(this.state.dealerCards);\n  let playerTotal = this.getTotalValue(this.state.playerCards);\n    \n  console.log(\"dealerTotal \", dealerTotal);\n  console.log(\"playerTotal \", playerTotal);\n\n  if ((dealerTotal > 21)||(dealerTotal<playerTotal)){\n    this.setState({message: \"You Win\"});\n  } else if (dealerTotal === playerTotal)  {\n    this.setState({message: \"You Tie\"});\n  } else if (dealerTotal>playerTotal){\n    this.setState({message: \"You Lose\"});\n  }\n  this.setState({disableBtn: true});\n}\n\n  getTotalValue(cards){\n    let total = 0;\n    cards.forEach(x=>{\n      total += cardMap[x.value] || +x.value;\n    })\n    return total;\n  }\n\n  hitDealer(){\n    let total = this.getTotalValue(this.state.dealerCards);\n    console.log(\"the hitdealer total is at \" + total);\n    if (total<17)\n    {\n      API.deal(this.state.deckId, 1).then(res=>{\n        console.log(\"a new card is dealt to the dealer\");\n    \n        let cards = this.state.dealerCards;\n        cards.push(\n          {image: res.data.cards[0].image,\n          value: res.data.cards[0].value});\n  \n        this.setState({dealerCards: cards});\n  \n        total = this.getTotalValue(cards);\n        if (total>17){\n          this.determineWinner();\n        } else {\n          this.hitDealer();\n        }\n      })\n    } else {\n      this.determineWinner();\n    }\n  }\n\n\n    // hitDealer(cb){\n  //   let total = this.getTotalValue(this.state.dealerCards);\n  //   console.log(\"the hitdealer total is at \" + total);\n  //   if (total<17)\n  //   {\n  //     API.deal(this.state.deckId, 1).then(res=>{\n  //       console.log(\"a new card is dealt to the dealer\");\n    \n  //       let cards = this.state.dealerCards;\n  //       cards.push(\n  //         {image: res.data.cards[0].image,\n  //         value: res.data.cards[0].value});\n  \n  //       this.setState({dealerCards: cards});\n  \n  //       total = this.getTotalValue(cards);\n  //       this.hitDealer();\n  //     })\n  //   }\n  //   else {\n  //     console.log(\"I am calling the callback now\");\n  //     if (cb) cb();\n  //   }\n\n  // }\n\n  handleResetClick(e){\n    e.preventDefault();\n    this.setState({disableBtn: false});\n    this.setState({message: \"Welcome Back\"});\n\n    this.init();\n  }\n\n\n\n  render(){\n    return(\n    <div className=\"App\">\n        <div>\n          <h1>{this.state.message}</h1>\n          <h2>Dealer's Hand</h2>\n          <GameDeck cards={this.state.dealerCards}></GameDeck>\n          <h2>Player's Hand</h2>\n          <GameDeck cards={this.state.playerCards}></GameDeck>\n        </div>\n        <div>\n          <button disabled={this.state.disableBtn} onClick={this.handleHitClick} >Hit</button>\n          <button disabled={this.state.disableBtn} onClick={this.handleStandClick}  >Stand</button>\n          <button disabled={!this.state.disableBtn} onClick={this.handleResetClick} >Play Again</button>\n        </div>\n    </div>\n  )}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}